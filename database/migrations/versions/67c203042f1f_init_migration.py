"""Init migration

Revision ID: 67c203042f1f
Revises: 
Create Date: 2024-03-07 19:02:31.326819

"""
import uuid
from datetime import datetime as dt
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '67c203042f1f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    categories = op.create_table('categories',
sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        schema='expense_bot'
    )
    op.bulk_insert(
        categories, [
            {
                "id": uuid.uuid4(),
                "name": "Food",
            },
            {
                "id": uuid.uuid4(),
                "name": "Eat outside",
            },
            {
                "id": uuid.uuid4(),
                "name": "Transportation",
            },
            {
                "id": uuid.uuid4(),
                "name": "Fun",
            },
            {
                "id": uuid.uuid4(),
                "name": "Rent",
            },
            {
                "id": uuid.uuid4(),
                "name": "Home",
            },
            {
                "id": uuid.uuid4(),
                "name": "Clothes",
            },
            {
                "id": uuid.uuid4(),
                "name": "Facilities",
            },
            {
                "id": uuid.uuid4(),
                "name": "Medicine",
            },
            {
                "id": uuid.uuid4(),
                "name": "Other",
            }
        ]
    )

    properties = op.create_table('properties',
sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('is_required', sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        schema='expense_bot'
    )
    op.bulk_insert(
        properties, [
            {
                "id": uuid.uuid4(),
                "name": "base_currency",
                "is_required": True,
            },
            {
                "id": uuid.uuid4(),
                "name": "categories",
                "is_required": True,
            },
            {
                "id": uuid.uuid4(),
                "name": "amounts",
                "is_required": True,
            },
            {
                "id": uuid.uuid4(),
                "name": "comments",
                "is_required": True,
            },
            {
                "id": uuid.uuid4(),
                "name": "shortcuts",
                "is_required": False,
            },
        ],
    )

    users = op.create_table('users',
sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('role', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        schema='expense_bot'
    )
    op.bulk_insert(
        users, [{
            "id": 355824661,
            "role": "admin",
            "created_at": dt.now(),
            "updated_at": dt.now(),
        }],
    )

    op.create_table('expenses',
sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.BigInteger(), nullable=False),
        sa.Column('category_id', sa.UUID(), nullable=False),
        sa.Column('spent_on', sa.Date(), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('currency', sa.String(), nullable=False),
        sa.Column('rates', sa.JSON(), nullable=False),
        sa.Column('comment', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['category_id'], ['expense_bot.categories.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['expense_bot.users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        schema='expense_bot'
    )
    op.create_table('users_properties',
sa.Column('property_id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.BigInteger(), nullable=False),
        sa.Column('property_value', sa.JSON(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['property_id'], ['expense_bot.properties.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['expense_bot.users.id'], ),
        sa.PrimaryKeyConstraint('property_id', 'user_id', name='pk_users_properties'),
        schema='expense_bot'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_properties', schema='expense_bot')
    op.drop_table('expenses', schema='expense_bot')
    op.drop_table('users', schema='expense_bot')
    op.drop_table('properties', schema='expense_bot')
    op.drop_table('categories', schema='expense_bot')
    # ### end Alembic commands ###
